---
# tasks file for mail-server
# ==================================================================================================
#
# Task: Install apps
#
# ==================================================================================================
- name: "Include OS-specific variables."
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: no
  tags:
    - dovecot

- name: "Check if we need ldap related packages."
  ansible.builtin.set_fact:
    autonomy_dovecot_packages: "{{ autonomy_dovecot_packages + [item] }}"
  loop:
    - "dovecot-ldap"
    - "dovecot-gssapi"
  when:
    - autonomy_realm_identity_management_system is truthy
  tags:
    - dovecot

- name: "Install packages."
  ansible.builtin.package:
    name: "{{ autonomy_dovecot_packages }}"
    state: present
  become: yes
  tags:
    - dovecot

- name: "Update password and auth mechanims."
  ansible.builtin.set_fact:
    autonomy_dovecot_password_databases: "{{ autonomy_dovecot_password_databases + ['ldap'] }}"
    autonomy_dovecot_auth_mechanisms: "{{ ['gssapi'] + autonomy_dovecot_auth_mechanisms + ['oauthbearer xoauth2'] }}"
    autonomy_dovecot_auth_conf: "{{ autonomy_dovecot_auth_conf + [autonomy_dovecot_auth_conf_ldap] + [autonomy_dovecot_auth_conf_oauth2] }}"
  become: no
  when:
    - autonomy_realm_identity_management_system == "ad"
  tags:
    - dovecot

- name: "Check if we are using a bounce folder."
  ansible.builtin.set_fact:
    autonomy_dovecot_private_namespace_mailboxes: "{{ autonomy_dovecot_private_namespace_mailboxes + [autonomy_dovecot_bounce_folder] }}"
  become: no
  when:
    - autonomy_dovecot_bounce_folder_name is truthy
  tags:
    - dovecot

- name: "Check if we are using an Advertisements folder."
  ansible.builtin.set_fact:
    autonomy_dovecot_private_namespace_mailboxes: "{{ autonomy_dovecot_private_namespace_mailboxes + [autonomy_dovecot_advertisements_folder] }}"
  become: no
  when:
    - autonomy_dovecot_advertisements_folder_name is truthy
  tags:
    - dovecot

- name: "Check if we are using an inboxzero namespace configuration."
  ansible.builtin.set_fact:
    autonomy_dovecot_namespaces: "{{ autonomy_dovecot_namespaces + [autonomy_dovecot_inboxzero_namespace] }}"
  become: no
  when:
    - autonomy_dovecot_use_inboxzero_namespace
  tags:
    - dovecot

- name: "Get Users' password from password-store."
  ansible.builtin.set_fact:
    __mail_user: "{{ mail_user }}"
    __mail_user_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/domain_users/{{ mail_user }}/password"
    __password_lookup: "{{ __password_store_id }}"
  #no_log: yes
  become: no
  delegate_to: localhost
  register: domain_user_list
  tags:
    - dovecot

# ==================================================================================================
#
# Configuration tasks
#
# ==================================================================================================
- name: "Install config files to {{ autonomy_dovecot_etc }}."
  ansible.builtin.template:
    src: "etc/dovecot/{{ item }}.j2"
    dest: "{{ autonomy_dovecot_etc }}/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop:
    - dovecot.conf
    #- "{{ autonomy_dovecot_password_file }}"
  become: yes
  notify: "restart dovecot"
  tags:
    - dovecot

- name: "Install auth config files to {{ autonomy_dovecot_etc }}."
  ansible.builtin.template:
    src: "etc/dovecot/dovecot-{{ item.name }}.conf.ext.j2"
    dest: "{{ autonomy_dovecot_etc }}/dovecot-{{ item.name }}.conf.ext"
    owner: "root"
    group: "root"
    mode: "0644"
  loop: "{{ autonomy_dovecot_auth_conf }}"
  become: yes
  notify: "restart dovecot"
  when:
    - item.name != "system"
    - item.name != "deny"
  tags:
    - dovecot

- name: "Install configuration files to {{ autonomy_dovecot_confd }}."
  ansible.builtin.template:
    src: "etc/dovecot/conf.d/{{ item }}.j2"
    dest: "{{ autonomy_dovecot_confd }}/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ autonomy_dovecot_conf_files }}"
  notify: "restart dovecot"
  tags:
    - dovecot

- name: "Install authorization configuration files to {{ autonomy_dovecot_confd }}."
  ansible.builtin.template:
    src: "etc/dovecot/conf.d/auth.conf.j2"
    dest: "{{ autonomy_dovecot_confd }}/auth-{{ item.name }}.conf.ext"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ autonomy_dovecot_auth_conf }}"
  notify: "restart dovecot"
  tags:
    - dovecot

# ==================================================================================================
#
# This section creates the virtual directories.
#
# ==================================================================================================
- name: "Ensure Virtual Directory definitions exist."
  ansible.builtin.file:
    path: "{{ autonomy_dovecot_virtual_dir }}/{{ item.name }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop: "{{ autonomy_dovecot_virtual_mailboxes }}"
  tags:
    - dovecot

- name: "Install configuration files to {{ autonomy_dovecot_virtual_dir }}."
  ansible.builtin.template:
    src: "etc/dovecot/virtual/dovecot-virtual.j2"
    dest: "{{ autonomy_dovecot_virtual_dir }}/{{ item.name }}/dovecot-virtual"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ autonomy_dovecot_virtual_mailboxes }}"
  tags:
    - dovecot

# ==================================================================================================
#
# If "dovecot_inboxzero_mailboxes" is defined, then create the inboxzero virtual directories.
# It's definition is the exact same as 'dovecot_virtual_mailboxes'
#
# I use this to create 'inboxzero' style virtual directories at the top for my users.
# Inboxzero/
#   Inbox (Emails that are unread)
#   Followup (Emails flagged as 'important')
#   Hold (Emails that are ____________)
#
# ==================================================================================================
- name: "Ensure 'Inboxzero' Virtual Directory definitions exist."
  ansible.builtin.file:
    path: "{{ autonomy_dovecot_inboxzero_dir }}/{{ item.name }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop: "{{ autonomy_dovecot_inboxzero_mailboxes }}"
  when:
    - autonomy_dovecot_use_inboxzero_namespace
  tags:
    - dovecot

- name: "Install configuration files to {{ autonomy_dovecot_inboxzero_dir }}."
  ansible.builtin.template:
    src: "etc/dovecot/virtual/dovecot-virtual.j2"
    dest: "{{ autonomy_dovecot_inboxzero_dir }}/{{ item.name }}/dovecot-virtual"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ autonomy_dovecot_inboxzero_mailboxes }}"
  when:
    - autonomy_dovecot_use_inboxzero_namespace
  tags:
    - dovecot

# ==================================================================================================
#
# Setup Dovecot Sieve
#
# ==================================================================================================
- name: "Ensure Dovecot Sieve Directories exists."
  ansible.builtin.file:
    path: "{{ autonomy_dovecot_sieve_dir }}/{{ item }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop:
    - before
    - after
    - global
  tags:
    - dovecot

- name: "Install IMAPSieve Spam Update Filters."
  ansible.builtin.template:
    src: "etc/dovecot/sieve/report-sieve.j2"
    dest: "{{ autonomy_dovecot_sieve_global_dir }}/report-{{ item.type }}.sieve"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ autonomy_dovecot_imapsieve_mailboxes }}"
  notify: "restart dovecot"
  tags:
    - dovecot
    - sieve-filters

- name: "Install Sieve rules."
  ansible.builtin.template:
    src: "etc/dovecot/sieve/{{ item.name }}.sieve.j2"
    dest: "{{ autonomy_dovecot_sieve_dir }}/{{ item.type }}/{{ item.priority }}-{{ item.name }}.sieve"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ autonomy_dovecot_sieve_files }}"
  notify: "recompile sieve"
  vars:
    __main_folder: "Inbox"
  when:
    - (item.archive is not defined or item.archive is false)
  tags:
    - dovecot
    - sieve-filters

- name: "Install Sieve rules. (Archive)"
  ansible.builtin.template:
    src: "etc/dovecot/sieve/{{ item.name }}.sieve.j2"
    dest: "{{ autonomy_dovecot_sieve_dir }}/{{ item.type }}/{{ item.priority }}-{{ item.name }}-archive.sieve"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ autonomy_dovecot_sieve_files }}"
  vars:
    __main_folder: "Archive"
  when:
    - item.archive is defined
    - item.archive
  tags:
    - dovecot
    - sieve-filters

- name: "Ensure Sieve Pipe Bin Dir exists."
  ansible.builtin.file:
    path: "{{ autonomy_dovecot_sieve_pipe_bin_dir }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  tags:
    - dovecot

- name: "Install IMAPSieve Spam Update Filters."
  ansible.builtin.template:
    src: "usr/lib/dovecot/sieve/sa-learn.j2"
    dest: "{{ autonomy_dovecot_sieve_pipe_bin_dir }}/sa-learn-{{ item.type }}.sh"
    owner: "root"
    group: "root"
    mode: "0755"
  become: yes
  loop: "{{ autonomy_dovecot_imapsieve_mailboxes }}"
  tags:
    - dovecot

# ==================================================================================================
#
# Logging Configuration
#
# ==================================================================================================
- name: "Create logging directories."
  ansible.builtin.file:
    path: "{{ autonomy_dovecot_log_dir }}"
    owner: "root"
    group: "root"
    mode: "0755"
    state: directory
  become: yes
  when:
    - autonomy_dovecot_log_dir is truthy
    - (autonomy_dovecot_info_log_path is truthy or autonomy_dovecot_debug_log_path is truthy)
  tags:
    - dovecot

# ==================================================================================================
#
# Email Migration
#
# I am considering changing this to a template that creates a script to do this.  Then setup cron to
# run the script say every 5 minutues.
#
# That may only make sense if it's not a one time migration.
#
# ==================================================================================================
- name: "Perform email migration"
  ansible.builtin.command:
    cmd: >-
      doveadm
        -o imapc_host='imap.gmail.com'
        -o imapc_user='{{ item.account }}'
        -o imapc_password='{{ item.password | default(__password) }}'
        -o imapc_features="rfc822.size fetch-headers gmail-migration"
        -o imapc_port=993
        -o imapc_ssl=imaps
        -o ssl_client_ca_dir=/etc/ssl/certs
        -o imapc_ssl_verify=yes
        backup
          -a 'Virtual/All Mail'
          -f
          -O '-$GmailHaveLabels'
          -R
          -u {{ item.account }} imapc:
  become: yes
  loop: "{{ autonomy_dovecot_migration_users }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/external_services/{{ item.source }}/{{ item.account }}"
    __password_lookup: "{{ __password_store_id }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - item.account != 'bob@example.com'
  tags:
    - dovecot-import
