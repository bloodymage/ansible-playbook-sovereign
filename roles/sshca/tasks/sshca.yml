---
- name: "Install packages."
  ansible.builtin.package:
    name: "{{ autonomy_sshca_packages }}"
    state: present
  become: yes
  delegate_to: localhost
  run_once: yes
  tags:
    - sshca
    - sshca_debug
    - sshca-debug
    - install-packages

# ==================================================================================================
#
# Create a CA key directory
#
#
# ==================================================================================================
- name: "Create CA key directory."
  ansible.builtin.file:
    path: "{{ sshca_key_directory }}"
    state: directory
    owner: "{{ autonomy_sshca_user }}"
    group: "{{ autonomy_sshca_group }}"
    mode: '0700'
  delegate_to: localhost
  run_once: yes
  become: no
  tags:
    - sshca
    - sshca_debug
    - sshca-debug

- name: "Check if we are regenerating passwords."
  ansible.builtin.set_fact:
    autonomy_sshca_regenerate_passwords: true
  delegate_to: localhost
  run_once: true
  become: false
  tags:
    - never
    - regenerate-passwords
    - regenerate-sshca-passwords

- name: "Check if we are regenerating Host CA password."
  ansible.builtin.set_fact:
    autonomy_sshca_regenerate_host_ca_password: true
  delegate_to: localhost
  run_once: true
  become: false
  tags:
    - never
    - regenerate-sshca-host-ca-password

- name: "Check if we are regenerating Host CA password."
  ansible.builtin.set_fact:
    autonomy_sshca_regenerate_user_ca_password: true
  delegate_to: localhost
  run_once: true
  become: false
  tags:
    - never
    - regenerate-sshca-user-ca-password

# ==================================================================================================
#
# Generate Passwords if they don't exist
#
# ==================================================================================================
- name: "Ensure we have a password for the Host CA Key."
  ansible.builtin.set_fact:
    sshca_host_key_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_dir: "{{ autonomy_passdb }}/{{ autonomy_root_domain }}/sshca"
    __password_store_id: "{{ __password_store_dir }}/sshca_host_key_password"
    __password_length: "length={{ autonomy_password_length }}"
    __password_overwrite: "overwrite={{ autonomy_sshca_regenerate_host_ca_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols={{ autonomy_sshca_password_no_symbols }}"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  delegate_to: localhost
  run_once: true
  become: false
  changed_when:
    - sshca_host_key_password != "password"
  when:
    - sshca_host_key_password == "password"
  tags:
    - sshca
    - sshca_debug
    - sshca-debug

- name: "Ensure we have a password for the User CA Key."
  ansible.builtin.set_fact:
    sshca_user_key_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_dir: "{{ autonomy_passdb }}/{{ autonomy_root_domain }}/sshca"
    __password_store_id: "{{ __password_store_dir }}/sshca_user_key_password"
    __password_length: "length={{ autonomy_password_length }}"
    __password_overwrite: "overwrite={{ autonomy_sshca_regenerate_user_ca_password }} backup=true"
    __password_create: "create=true"
    __password_symbols: "nosymbols={{ autonomy_sshca_password_no_symbols }}"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  delegate_to: localhost
  become: false
  changed_when:
    - sshca_user_key_password != "password"
  when:
    - sshca_user_key_password == "password"
  tags:
    - sshca
    - sshca_debug
    - sshca-debug

# ==================================================================================================
#
# Generate CA keys
#
# ==================================================================================================
- name: "Generate Host CA keys."
  community.crypto.openssh_keypair:
    path: "{{ sshca_key_directory }}/{{ sshca_host_keyfile }}"
    type: "{{ sshca_host_key_type | lower }}"
    comment: "{{ sshca_host_key_comment }}"
    passphrase: "{{ sshca_host_key_password }}"
    owner: "{{ autonomy_sshca_user }}"
    group: "{{ autonomy_sshca_group }}"
    mode: "0600"
    state: "present"
    regenerate: "full_idempotence"
    force: false
  delegate_to: localhost
  run_once: true
  become: false

- name: "Generate User CA keys."
  community.crypto.openssh_keypair:
    path: "{{ sshca_key_directory }}/{{ sshca_user_keyfile }}"
    type: "{{ sshca_user_key_type | lower }}"
    comment: "{{ sshca_user_key_comment }}"
    passphrase: "{{ sshca_user_key_password }}"
    owner: "{{ autonomy_sshca_user }}"
    group: "{{ autonomy_sshca_group }}"
    state: "present"
    regenerate: "full_idempotence"
    mode: "0600"
    force: false
  delegate_to: localhost
  run_once: true
  become: false
